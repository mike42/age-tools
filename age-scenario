#!/usr/bin/env python3

import argparse
import logging

from libage.scenario import scenario, minimap, fullsize


def render_command(render_args):
    # Render full-scale image of AOE1 scenario file (work in progress)
    input_filename = render_args.scenario
    output_filename = input_filename + ".png" if render_args.out is None else render_args.out
    scenario1 = scenario.load(input_filename)
    im = fullsize.draw(scenario1)
    im.save(output_filename)


def minimap_command(minimap_args):
    # Render mini-map from AOE1 scenario file
    input_filename = minimap_args.scenario
    output_filename = input_filename + ".png" if minimap_args.out is None else minimap_args.out
    scenario1 = scenario.load(input_filename)
    im = minimap.draw(scenario1)
    im.save(output_filename)


def info_command(info_args):
    # Parse and show info about scenario file only
    input_filename = info_args.scenario
    scenario1 = scenario.load(input_filename)
    print("{}: AOE scenario version {}, {} x {}".format(
        input_filename,
        scenario1.header.file_version,
        scenario1.map_scen.width,
        scenario1.map_scen.height))


def decompress_command(decompress_args):
    # Extract decompressed segment of scenario file
    input_filename = decompress_args.scenario
    output_filename = input_filename + ".dat" if decompress_args.out is None else decompress_args.out
    scenario1 = scenario.decompress(input_filename, output_filename)


def main():
    # General stuff
    parser = argparse.ArgumentParser(description='Tool to read AOE1 scenario files (*.scn and *.scx)')
    parser.add_argument('--verbose', '-v', action='count', default=0)
    subparsers = parser.add_subparsers(help='action to be performed', dest='action', required=True)

    # Minimap command
    parser_minimap = subparsers.add_parser('minimap', help='render a small image (minimap) of the scenario')
    parser_minimap.add_argument('scenario', metavar='scenario.scx', help='the scenario file to read')
    parser_minimap.add_argument('--out', type=str, help='output filename', metavar='scenario.png')
    parser_minimap.set_defaults(func=minimap_command)

    # Render command
    parser_minimap = subparsers.add_parser('render', help='render a full-size image of the scenario (work in '
                                                          'progress). Expects PNG versions of all terrain and border '
                                                          'graphics to exist in the form "terrain/15001_001.png", '
                                                          '"border/20000_001.png", etc. These may be produced with '
                                                          'the age-archive and age-slp utilities.')
    parser_minimap.add_argument('scenario', metavar='scenario.scx', help='the scenario file to read')
    parser_minimap.add_argument('--out', type=str, help='output filename', metavar='scenario.png')
    parser_minimap.set_defaults(func=render_command)

    # Info command
    parser_info = subparsers.add_parser('info', help='show information about a scenario file')
    parser_info.add_argument('scenario', metavar='scenario.scx', help='the scenario file to read')
    parser_info.set_defaults(func=info_command)

    # Decompress command
    parser_decompress = subparsers.add_parser('decompress', help='extract the compressed section of a scenario file '
                                                                 'for debugging')
    parser_decompress.add_argument('scenario', metavar='scenario.scx', help='the scenario file to read')
    parser_decompress.add_argument('--out', type=str, help='output filename', metavar='scenario.dat')
    parser_decompress.set_defaults(func=decompress_command)

    args = parser.parse_args()

    # Set log level
    if args.verbose > 1:
        log_level = logging.DEBUG
    elif args.verbose == 1:
        log_level = logging.INFO
    else:
        log_level = logging.WARNING
    logging.basicConfig(level=log_level)

    # Call requested function
    args.func(args)


if __name__ == "__main__":
    main()
